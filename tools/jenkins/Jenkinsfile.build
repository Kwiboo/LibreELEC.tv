pipeline {
	agent {
		dockerfile {
			label 'docker'
			dir 'tools/docker/focal'
		}
	}
	parameters {
		choice(name: 'PROJECT', choices: [
			'Generic',
			'Allwinner',
			'Amlogic',
			'NXP',
			'Qualcomm',
			'RPi',
			'Rockchip',
		],
		description: 'Project to build')
		choice(name: 'DEVICE', choices: [
			'',
			'A20',
			'A64',
			'AMLG12',
			'AMLGX',
			'Dragonboard',
			'H3',
			'H5',
			'H6',
			'RK3288',
			'RK3328',
			'RK3399',
			'RPi',
			'RPi2',
			'RPi4',
			'Slice',
			'Slice3',
			'iMX6',
		],
		description: 'Device to build')
		choice(name: 'ARCH', choices: [
			'x86_64',
			'arm',
			'aarch64',
		],
		description: 'Arch to build')
		choice(name: 'BUILD_PERIODIC', choices: [
			'devel',
			'nightly',
			'daily',
			'weekly',
			'monthly',
		],
		description: 'Periodic build')
		booleanParam(name: 'PUBLISH', defaultValue: false, description: 'Toggle this value')
	}
	stages {
		stage('Build') {
			steps {
				sh 'git clean -fdx target'
				sh 'make image'
			}
		}
		stage('Archive') {
			when {
				not { expression { return params.PUBLISH } }
			}
			steps {
				archiveArtifacts artifacts: 'target/*.img.gz*, target/*.tar*'
			}
		}
		stage('Publish') {
			when {
				expression { return params.PUBLISH }
				not { environment name: 'PUBLISH_TO', value: '' }
			}
			steps {
				sshPublisher(publishers: [sshPublisherDesc(configName: env.PUBLISH_TO, transfers: [sshTransfer(flatten: true, sourceFiles: 'target/*.img.gz, target/*.tar')])])
			}
		}
	}
}
