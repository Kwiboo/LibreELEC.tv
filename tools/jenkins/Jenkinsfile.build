pipeline {
	agent {
		dockerfile {
			dir 'tools/docker/focal'
		}
	}
	parameters {
		choice(name: 'BUILD_PERIODIC', choices: [
			'devel',
			'nightly',
			'daily',
			'weekly',
			'monthly',
		],
		description: 'Periodic build')
		choice(name: 'MAKE_TARGET', choices: [
			'',
			'image',
			'image noobs',
		],
		description: 'Periodic build')
		booleanParam(name: 'PUBLISH', defaultValue: false, description: 'Publish build')
		booleanParam(name: 'CLEAN', defaultValue: false, description: 'Clean build')
	}
	stages {
		stage('Project') {
			when {
				environment name: 'PROJECT', value: ''
			}
			steps {
				script {
					def projects = sh script: "ls -A1 projects", returnStdout: true
					env.PROJECT = input message: 'Select project to build', ok: 'Next',
						parameters: [choice(name: 'PROJECT', choices: projects, description: '')]
				}
			}
		}
		stage('Device') {
			when {
				environment name: 'DEVICE', value: ''
				not { environment name: 'PROJECT', value: 'Generic' }
			}
			steps {
				script {
					def devices = sh script: "ls -A1 projects/${env.PROJECT}/devices", returnStdout: true
					env.DEVICE = input message: 'Select device to build', ok: 'Next',
						parameters: [choice(name: 'DEVICE', choices: devices, description: '')]
					env.ARCH = 'arm'
				}
			}
		}
		stage('Clean') {
			when {
				expression { return params.CLEAN }
			}
			steps {
				sh 'git clean -fdx'
			}
		}
		stage('Build') {
			steps {
				sh 'git clean -fdx target'
				sh "make ${params.MAKE_TARGET}"
			}
		}
		stage('Archive') {
			when {
				not { expression { return params.PUBLISH } }
			}
			steps {
				archiveArtifacts artifacts: 'target/*.img.gz*, target/*.tar*'
			}
		}
		stage('Publish') {
			when {
				expression { return params.PUBLISH }
				not { environment name: 'PUBLISH_TO', value: '' }
			}
			steps {
				sshPublisher(publishers: [sshPublisherDesc(configName: env.PUBLISH_TO, transfers: [sshTransfer(flatten: true, sourceFiles: 'target/*.img.gz*, target/*.tar*')])])
			}
		}
	}
}
